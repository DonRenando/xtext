/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); 
	    }
		lv_greetings_0_0=ruleGreeting		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"greetings",
        		lv_greetings_0_0, 
        		"Greeting");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleGreeting
entryRuleGreeting returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	 iv_ruleGreeting=ruleGreeting 
	 { $current=$iv_ruleGreeting.current; } 
	 EOF 
;

// Rule Greeting
ruleGreeting returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Question{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGreetingAccess().getQuestionKeyword_0());
    }
(
(
		lv_question_1_0=RULE_STRING
		{
			newLeafNode(lv_question_1_0, grammarAccess.getGreetingAccess().getQuestionSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGreetingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"question",
        		lv_question_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGreetingAccess().getRightCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGreetingAccess().getReponsesReponseParserRuleCall_3_0()); 
	    }
		lv_reponses_3_0=ruleReponse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGreetingRule());
	        }
       		add(
       			$current, 
       			"reponses",
        		lv_reponses_3_0, 
        		"Reponse");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleReponse
entryRuleReponse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReponseRule()); }
	 iv_ruleReponse=ruleReponse 
	 { $current=$iv_ruleReponse.current; } 
	 EOF 
;

// Rule Reponse
ruleReponse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReponseAccess().getReponseTParserRuleCall_0()); 
    }
    this_ReponseT_0=ruleReponseT
    { 
        $current = $this_ReponseT_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReponseAccess().getReponseFParserRuleCall_1()); 
    }
    this_ReponseF_1=ruleReponseF
    { 
        $current = $this_ReponseF_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReponseT
entryRuleReponseT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReponseTRule()); }
	 iv_ruleReponseT=ruleReponseT 
	 { $current=$iv_ruleReponseT.current; } 
	 EOF 
;

// Rule ReponseT
ruleReponseT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ReponseTrue{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReponseTAccess().getReponseTrueKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getReponseTAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReponseTRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReponseTAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleReponseF
entryRuleReponseF returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReponseFRule()); }
	 iv_ruleReponseF=ruleReponseF 
	 { $current=$iv_ruleReponseF.current; } 
	 EOF 
;

// Rule ReponseF
ruleReponseF returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ReponseFalse{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReponseFAccess().getReponseFalseKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getReponseFAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReponseFRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReponseFAccess().getRightCurlyBracketKeyword_2());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


