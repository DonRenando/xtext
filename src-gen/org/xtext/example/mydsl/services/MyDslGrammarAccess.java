/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsGreetingParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Greeting+;
		@Override public ParserRule getRule() { return rule; }

		//greetings+=Greeting+
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }

		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_0() { return cGreetingsGreetingParserRuleCall_0; }
	}

	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuestionSTRINGTerminalRuleCall_1_0 = (RuleCall)cQuestionAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReponsesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReponsesReponseParserRuleCall_3_0 = (RuleCall)cReponsesAssignment_3.eContents().get(0);
		
		//Greeting:
		//	"Question{" question=STRING "}" reponses+=Reponse+;
		@Override public ParserRule getRule() { return rule; }

		//"Question{" question=STRING "}" reponses+=Reponse+
		public Group getGroup() { return cGroup; }

		//"Question{"
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }

		//question=STRING
		public Assignment getQuestionAssignment_1() { return cQuestionAssignment_1; }

		//STRING
		public RuleCall getQuestionSTRINGTerminalRuleCall_1_0() { return cQuestionSTRINGTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }

		//reponses+=Reponse+
		public Assignment getReponsesAssignment_3() { return cReponsesAssignment_3; }

		//Reponse
		public RuleCall getReponsesReponseParserRuleCall_3_0() { return cReponsesReponseParserRuleCall_3_0; }
	}

	public class ReponseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reponse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReponseTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReponseFParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Reponse:
		//	ReponseT | ReponseF;
		@Override public ParserRule getRule() { return rule; }

		//ReponseT | ReponseF
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReponseT
		public RuleCall getReponseTParserRuleCall_0() { return cReponseTParserRuleCall_0; }

		//ReponseF
		public RuleCall getReponseFParserRuleCall_1() { return cReponseFParserRuleCall_1; }
	}

	public class ReponseTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReponseT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReponseTrueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReponseT:
		//	"ReponseTrue{" name=STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"ReponseTrue{" name=STRING "}"
		public Group getGroup() { return cGroup; }

		//"ReponseTrue{"
		public Keyword getReponseTrueKeyword_0() { return cReponseTrueKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ReponseFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReponseF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReponseFalseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReponseF:
		//	"ReponseFalse{" name=STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"ReponseFalse{" name=STRING "}"
		public Group getGroup() { return cGroup; }

		//"ReponseFalse{"
		public Keyword getReponseFalseKeyword_0() { return cReponseFalseKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final GreetingElements pGreeting;
	private final ReponseElements pReponse;
	private final ReponseTElements pReponseT;
	private final ReponseFElements pReponseF;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreeting = new GreetingElements();
		this.pReponse = new ReponseElements();
		this.pReponseT = new ReponseTElements();
		this.pReponseF = new ReponseFElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=Greeting+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Greeting:
	//	"Question{" question=STRING "}" reponses+=Reponse+;
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}

	//Reponse:
	//	ReponseT | ReponseF;
	public ReponseElements getReponseAccess() {
		return pReponse;
	}
	
	public ParserRule getReponseRule() {
		return getReponseAccess().getRule();
	}

	//ReponseT:
	//	"ReponseTrue{" name=STRING "}";
	public ReponseTElements getReponseTAccess() {
		return pReponseT;
	}
	
	public ParserRule getReponseTRule() {
		return getReponseTAccess().getRule();
	}

	//ReponseF:
	//	"ReponseFalse{" name=STRING "}";
	public ReponseFElements getReponseFAccess() {
		return pReponseF;
	}
	
	public ParserRule getReponseFRule() {
		return getReponseFAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
